# Generated from ../flash_patcher/antlr_source/PatchfileLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,258,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,115,8,2,1,2,4,2,118,8,2,11,2,12,2,119,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,134,8,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,3,5,159,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,
        36,222,8,36,11,36,12,36,223,1,37,4,37,227,8,37,11,37,12,37,228,1,
        37,1,37,1,38,1,38,5,38,235,8,38,10,38,12,38,238,9,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,4,
        40,255,8,40,11,40,12,40,256,2,119,256,0,41,2,1,4,2,6,3,8,4,10,5,
        12,6,14,0,16,0,18,0,20,0,22,0,24,0,26,0,28,0,30,0,32,0,34,0,36,0,
        38,0,40,0,42,0,44,0,46,0,48,0,50,0,52,0,54,0,56,0,58,0,60,0,62,0,
        64,0,66,0,68,0,70,0,72,0,74,7,76,8,78,9,80,10,82,11,2,0,1,31,2,0,
        65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,
        0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,
        104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,
        76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
        2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,
        115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,
        0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,
        122,2,0,65,90,97,122,1,0,48,57,2,0,47,47,92,92,3,0,9,10,12,13,32,
        32,2,0,10,10,13,13,234,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,
        0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,
        0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,2,84,1,0,0,0,4,88,1,0,0,0,6,133,
        1,0,0,0,8,135,1,0,0,0,10,149,1,0,0,0,12,158,1,0,0,0,14,160,1,0,0,
        0,16,162,1,0,0,0,18,164,1,0,0,0,20,166,1,0,0,0,22,168,1,0,0,0,24,
        170,1,0,0,0,26,172,1,0,0,0,28,174,1,0,0,0,30,176,1,0,0,0,32,178,
        1,0,0,0,34,180,1,0,0,0,36,182,1,0,0,0,38,184,1,0,0,0,40,186,1,0,
        0,0,42,188,1,0,0,0,44,190,1,0,0,0,46,192,1,0,0,0,48,194,1,0,0,0,
        50,196,1,0,0,0,52,198,1,0,0,0,54,200,1,0,0,0,56,202,1,0,0,0,58,204,
        1,0,0,0,60,206,1,0,0,0,62,208,1,0,0,0,64,210,1,0,0,0,66,212,1,0,
        0,0,68,214,1,0,0,0,70,216,1,0,0,0,72,218,1,0,0,0,74,221,1,0,0,0,
        76,226,1,0,0,0,78,232,1,0,0,0,80,241,1,0,0,0,82,254,1,0,0,0,84,85,
        3,14,6,0,85,86,3,20,9,0,86,87,3,20,9,0,87,3,1,0,0,0,88,89,3,48,23,
        0,89,90,3,22,10,0,90,91,3,38,18,0,91,92,3,42,20,0,92,93,3,56,27,
        0,93,94,3,22,10,0,94,5,1,0,0,0,95,96,3,20,9,0,96,97,3,22,10,0,97,
        98,3,24,11,0,98,99,3,30,14,0,99,100,3,40,19,0,100,101,3,22,10,0,
        101,102,3,50,24,0,102,103,3,44,21,0,103,104,3,48,23,0,104,105,3,
        30,14,0,105,106,3,52,25,0,106,107,3,22,10,0,107,115,1,0,0,0,108,
        109,3,24,11,0,109,110,3,48,23,0,110,111,3,14,6,0,111,112,3,38,18,
        0,112,113,3,22,10,0,113,115,1,0,0,0,114,95,1,0,0,0,114,108,1,0,0,
        0,115,117,1,0,0,0,116,118,9,0,0,0,117,116,1,0,0,0,118,119,1,0,0,
        0,119,120,1,0,0,0,119,117,1,0,0,0,120,121,1,0,0,0,121,122,5,46,0,
        0,122,123,5,97,0,0,123,124,5,115,0,0,124,134,1,0,0,0,125,126,3,50,
        24,0,126,127,3,58,28,0,127,128,3,24,11,0,128,129,5,46,0,0,129,130,
        5,120,0,0,130,131,5,109,0,0,131,132,5,108,0,0,132,134,1,0,0,0,133,
        114,1,0,0,0,133,125,1,0,0,0,134,7,1,0,0,0,135,136,3,16,7,0,136,137,
        3,22,10,0,137,138,3,26,12,0,138,139,3,30,14,0,139,140,3,40,19,0,
        140,141,5,45,0,0,141,142,3,44,21,0,142,143,3,14,6,0,143,144,3,52,
        25,0,144,145,3,18,8,0,145,146,3,28,13,0,146,147,1,0,0,0,147,148,
        6,3,0,0,148,9,1,0,0,0,149,150,3,74,36,0,150,151,5,45,0,0,151,152,
        3,74,36,0,152,11,1,0,0,0,153,159,3,74,36,0,154,155,3,22,10,0,155,
        156,3,40,19,0,156,157,3,20,9,0,157,159,1,0,0,0,158,153,1,0,0,0,158,
        154,1,0,0,0,159,13,1,0,0,0,160,161,7,0,0,0,161,15,1,0,0,0,162,163,
        7,1,0,0,163,17,1,0,0,0,164,165,7,2,0,0,165,19,1,0,0,0,166,167,7,
        3,0,0,167,21,1,0,0,0,168,169,7,4,0,0,169,23,1,0,0,0,170,171,7,5,
        0,0,171,25,1,0,0,0,172,173,7,6,0,0,173,27,1,0,0,0,174,175,7,7,0,
        0,175,29,1,0,0,0,176,177,7,8,0,0,177,31,1,0,0,0,178,179,7,9,0,0,
        179,33,1,0,0,0,180,181,7,10,0,0,181,35,1,0,0,0,182,183,7,11,0,0,
        183,37,1,0,0,0,184,185,7,12,0,0,185,39,1,0,0,0,186,187,7,13,0,0,
        187,41,1,0,0,0,188,189,7,14,0,0,189,43,1,0,0,0,190,191,7,15,0,0,
        191,45,1,0,0,0,192,193,7,16,0,0,193,47,1,0,0,0,194,195,7,17,0,0,
        195,49,1,0,0,0,196,197,7,18,0,0,197,51,1,0,0,0,198,199,7,19,0,0,
        199,53,1,0,0,0,200,201,7,20,0,0,201,55,1,0,0,0,202,203,7,21,0,0,
        203,57,1,0,0,0,204,205,7,22,0,0,205,59,1,0,0,0,206,207,7,23,0,0,
        207,61,1,0,0,0,208,209,7,24,0,0,209,63,1,0,0,0,210,211,7,25,0,0,
        211,65,1,0,0,0,212,213,7,26,0,0,213,67,1,0,0,0,214,215,7,27,0,0,
        215,69,1,0,0,0,216,217,5,32,0,0,217,71,1,0,0,0,218,219,7,28,0,0,
        219,73,1,0,0,0,220,222,3,68,33,0,221,220,1,0,0,0,222,223,1,0,0,0,
        223,221,1,0,0,0,223,224,1,0,0,0,224,75,1,0,0,0,225,227,7,29,0,0,
        226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,
        229,230,1,0,0,0,230,231,6,37,1,0,231,77,1,0,0,0,232,236,5,35,0,0,
        233,235,8,30,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,
        236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,6,38,1,0,
        240,79,1,0,0,0,241,242,3,22,10,0,242,243,3,40,19,0,243,244,3,20,
        9,0,244,245,5,45,0,0,245,246,3,44,21,0,246,247,3,14,6,0,247,248,
        3,52,25,0,248,249,3,18,8,0,249,250,3,28,13,0,250,251,1,0,0,0,251,
        252,6,39,2,0,252,81,1,0,0,0,253,255,9,0,0,0,254,253,1,0,0,0,255,
        256,1,0,0,0,256,257,1,0,0,0,256,254,1,0,0,0,257,83,1,0,0,0,10,0,
        1,114,119,133,158,223,228,236,256,3,2,1,0,6,0,0,2,0,0
    ]

class PatchfileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD_BLOCK_MODE = 1

    ADD = 1
    REMOVE = 2
    FILENAME = 3
    BEGIN_PATCH = 4
    NUMBER_RANGE = 5
    FILE_ADD_TOKEN = 6
    INTEGER = 7
    WHITESPACE = 8
    COMMENT = 9
    END_PATCH = 10
    AS_TEXT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "ADD_BLOCK_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "ADD", "REMOVE", "FILENAME", "BEGIN_PATCH", "NUMBER_RANGE", 
            "FILE_ADD_TOKEN", "INTEGER", "WHITESPACE", "COMMENT", "END_PATCH", 
            "AS_TEXT" ]

    ruleNames = [ "ADD", "REMOVE", "FILENAME", "BEGIN_PATCH", "NUMBER_RANGE", 
                  "FILE_ADD_TOKEN", "A", "B", "C", "D", "E", "F", "G", "H", 
                  "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
                  "T", "U", "V", "W", "X", "Y", "Z", "LETTER", "NUMBER", 
                  "SPACE", "SLASH", "INTEGER", "WHITESPACE", "COMMENT", 
                  "END_PATCH", "AS_TEXT" ]

    grammarFileName = "PatchfileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


